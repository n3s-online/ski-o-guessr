---
description: Working in a Vite project
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Vite, React, Shadcn UI, Radix UI, and Tailwind.
  
  Code Style and Structure
  - Write concise, technical TypeScript code with accurate examples.
  - Use functional and declarative programming patterns; avoid classes.
  - Prefer iteration and modularization over code duplication.
  - Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
  - Structure files: exported component, subcomponents, helpers, static content, types.
  
  Naming Conventions
  - Use lowercase with dashes for directories (e.g., components/auth-wizard).
  - Favor named exports for components.
  
  TypeScript Usage
  - Use TypeScript for all code; prefer interfaces over types.
  - Avoid enums; use maps instead.
  - Use functional components with TypeScript interfaces.
  
  Syntax and Formatting
  - Use the "function" keyword for pure functions.
  - Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
  - Use declarative JSX.
  
  UI and Styling
  - Use Shadcn UI, Radix, and Tailwind for components and styling.
  - Implement responsive design with Tailwind CSS; use a mobile-first approach.
  
  Performance Optimization
  - Minimize unnecessary re-renders and side-effects in components (e.g., avoid 'useEffect' unless necessary).
  - Use Suspense for client components that rely on dynamic imports.
  - Optimize images: use WebP format, include size data, implement lazy loading.
  
  Key Conventions
  - Use 'nuqs' for URL search parameter state management.
  - Optimize Web Vitals (LCP, CLS, FID).
  - Minimize the use of client-side code:
    - Prefer static rendering with Vite.
    - Use client-side JavaScript only when absolutely necessary for dynamic behavior or Web API access.
    - Avoid data fetching or state management in client-side code.

  Follow Vite docs for bundling, development, and build optimization.
